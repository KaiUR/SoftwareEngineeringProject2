package assignment4Backgammon;

/**
 * A class representing a Random Player in Backgammon
 * 
 * @author Laurence Quinn 12473478, Ciar√°n O'Niell 12432672, Kai-Uwe Rathjen 12343046
 * @version 1.01, 4 APR 2014
 * @see assignment4Backgammon;
 * 
 */
public class RandomPlayer 
{
	private Board board;
	private int player;
	private char playerSymbol;
	private Random generator;
	
	public RandomPlayer(int player, Board board)
	{
		this.player = player;
		this.board = board;
		playerSymbol = (this.player == Board.PLAYER1) ? Board.PLAYER1_SYMBOL : Board.PLAYER2_SYMBOL;
		generator = new Random();
	}
	
	public int makeMove()
	{
		String[] possiblePlays = board.findAllPlays(player);
		String selection = possiblePlays[Math.abs(generator.nextInt() % possiblePlays.length)];
		String[] moves = selection.split("\\s");
		
		int position;
		int spacesToMove;
		
		System.out.print("Random Player move: ");
		
		for(int index = 0; index < moves.length; index++) 
		{
			int hyphon = moves[index].indexOf("-");
			if (moves[index].substring(0, 3).equals("bar"))
			{
				position = -1;
			} 
			else
			{
				position = Integer.parseInt(moves[index].substring(0, hyphon)) + 1;
			}
			spacesToMove = Integer.parseInt(moves[index].substring(hyphon + 1));
			
			System.out.print(position + "-" + spacesToMove + " ");
			board.makeAMove(position, spacesToMove, player);
		}
		
		System.out.println();
		
		int checkForWin = board.doPlay(playerSymbol);
		if(checkForWin == -1) {
			return 0;
		}
		else return board.winner(checkForWin, player);
	}
	
}
